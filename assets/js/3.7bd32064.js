(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{293:function(s,t,a){s.exports=a.p+"assets/img/redis1.efd3796c.png"},294:function(s,t,a){s.exports=a.p+"assets/img/redis2.0fa1d75d.png"},295:function(s,t,a){s.exports=a.p+"assets/img/redis3.41bcface.png"},296:function(s,t,a){s.exports=a.p+"assets/img/redis4.9c370afd.png"},297:function(s,t,a){s.exports=a.p+"assets/img/redis7.889d72e0.png"},298:function(s,t,a){s.exports=a.p+"assets/img/redis5.bc98d90f.png"},299:function(s,t,a){s.exports=a.p+"assets/img/redis6.1a9604f8.png"},300:function(s,t,a){s.exports=a.p+"assets/img/redis8.47b843ee.png"},301:function(s,t,a){s.exports=a.p+"assets/img/redis9.2dd20e3b.png"},302:function(s,t,a){s.exports=a.p+"assets/img/redis10.42c7318a.png"},303:function(s,t,a){s.exports=a.p+"assets/img/redis11.61dd839d.png"},304:function(s,t,a){s.exports=a.p+"assets/img/redis12.415a2149.png"},305:function(s,t,a){s.exports=a.p+"assets/img/redis13.2a8e12df.png"},306:function(s,t,a){s.exports=a.p+"assets/img/redis14.ef61c611.png"},307:function(s,t,a){s.exports=a.p+"assets/img/redis15.d46da5a6.png"},308:function(s,t,a){s.exports=a.p+"assets/img/redis16.448e679a.png"},354:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"redis学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis学习"}},[s._v("#")]),s._v(" Redis学习")]),s._v(" "),t("h2",{attrs:{id:"_1-底层数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-底层数据结构"}},[s._v("#")]),s._v(" 1.底层数据结构")]),s._v(" "),t("p",[s._v("redis底层使用c语言做了一些底层的数据结构用以支持redis的实现，帮助其支持其快速操作。其中包括以下这些数据结构")]),s._v(" "),t("h3",{attrs:{id:"_1-1-sds"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-sds"}},[s._v("#")]),s._v(" 1.1 SDS")]),s._v(" "),t("ul",[t("li",[s._v("数据结构定义"),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sdshdr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// buf中已使用字节长度")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" free "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// buf中未使用字节长度")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字节数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])]),s._v(" "),t("p",[t("img",{attrs:{src:a(293),alt:"redis"}}),s._v("\n如图，保存了五个字节长的字符串，最后的\\0遵循c语言以此结尾，不计入len\n"),t("img",{attrs:{src:a(294),alt:"redis2"}}),s._v("\n这个为free为5的sds")]),s._v(" "),t("ul",[t("li",[s._v("优势\n"),t("ul",[t("li",[s._v("O(1)时间复杂度获取字符串长度")]),s._v(" "),t("li",[s._v("记录了len和扩容机制能在strcat时杜绝缓冲区的溢出")]),s._v(" "),t("li",[s._v("减少了修改字符串长度时内存重分配次数\n"),t("ul",[t("li",[s._v("空间预分配 - 在拼接字符时小于1m扩大两倍，大于1m每次够用基础上扩充1m。")]),s._v(" "),t("li",[s._v("惰性空间释放 - 截取时会将剩余空间先留在那，记录在free内，避免频繁分配内存。")])])]),s._v(" "),t("li",[s._v("二进制安全 - 记录了len解决了\\0问题，可以保存音频、图片等文件二进制数据。")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-2-链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-链表"}},[s._v("#")]),s._v(" 1.2 链表")]),s._v(" "),t("ul",[t("li",[s._v("数据结构定义")])]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("listNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("listNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" prev"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前置节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("listNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后驱节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点的值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("listNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表头节点")]),s._v("\n    listNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表尾节点")]),s._v("\n    listNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链表所包含的节点数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点值复制函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点值释放函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("free"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//节点值对比函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("match"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("可以看到是一个标准的记录头尾节点和长度的双向链表实现")]),s._v(" "),t("ul",[t("li",[s._v("用处"),t("br"),s._v("\n应用广泛的数据结构，高效的节点重排能力和顺序性的节点访问方式"),t("br"),s._v("\n应用在"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("当一个列表包含比较多的元素或元素都是较长字符串时")])]),s._v("，以及发布订阅、慢查询、监视器等功能。")],1)]),s._v(" "),t("h3",{attrs:{id:"_1-3-字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-字典"}},[s._v("#")]),s._v(" 1.3 字典")]),s._v(" "),t("ul",[t("li",[s._v("数据结构定义")])]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dict")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类型特定函数")]),s._v("\n    dictType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//私有数据")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("privdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表")]),s._v("\n    dictht ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rehash索引")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当rehash不在进行时，值为-1")]),s._v("\n    in trehashidx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* rehashing not in progress if rehashidx == -1 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictht")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表数组")]),s._v("\n    dictEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表大小")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//哈希表大小掩码，用于计算索引值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//总是等于size-1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" sizemask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//该哈希表已有节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" used"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//键")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        uint64_tu64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        int64_ts64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向下个哈希表节点，形成链表")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dictEntry")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" dictEntry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("可以看出redis的hash实现和常见的有一点点不大一样，它有两个数组以及记录了rehashIndex等")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("用处\n也是常用的数据结构，使用hash对象时，"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("如果一个哈希包含的键值过多或元素都是较长字符串时")]),s._v("，")]),s._v("会采用hash表作为底层实现。")],1)]),s._v(" "),t("li",[t("p",[s._v("机制")]),s._v(" "),t("ul",[t("li",[s._v("平常只用ht[0]的哈希表，ht[1]只在rehash时使用")]),s._v(" "),t("li",[s._v("采用MurmurHash2算法计算键的哈希（即使输入的键是有规律的，也能很快给出很好的随机分布）,如图所示的hash,假如hash的值为8，还会经过如下步骤和sizemask做位与运算。\n"),t("img",{attrs:{src:a(295),alt:"redis3"}}),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hash"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("dict"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("＞ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sizemask "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),t("li",[s._v("使用链地址头插法解决hash冲突")]),s._v(" "),t("li",[s._v("rehash\n"),t("ul",[t("li",[s._v("为ht[1]分配空间，h[0].used*2的第一个2的n次幂或者h[0].used的第一个2的n次幂（对应扩容和收缩）")]),s._v(" "),t("li",[s._v("将h[0]上所有键值对重新hash迁移到ht[1]上")]),s._v(" "),t("li",[s._v("释放ht[0]，将ht[1]变为ht[0]，并新创建ht[1]")]),s._v(" "),t("li",[s._v("在没有bgsave或bgrewriteof时如果负载因子(ht[0].used/ht[0].size)大于等于1时或在bgsave等的时候负载因子大于等于5时会扩容。")]),s._v(" "),t("li",[s._v("rehash是渐进式的，如果庞大的键值对同时迁移可能会卡死服务器，所以它维护了rehashIndex，默认-1，开始rehash时为0，在对字典操作时会顺带对ht[0]的数组rehashIndex上的链表做迁移。直到迁移完成。")])])])])])]),s._v(" "),t("h3",{attrs:{id:"_1-4-跳表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-跳表"}},[s._v("#")]),s._v(" 1.4 跳表")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("数据结构定义"),t("br"),s._v("\n作为常用数据结构，是一种能快速查找的有序链表延伸，链表在查找时，需顺序遍历，而调表在有序链表的基础上维护若干层上层索引，这样查找时从上向下或向右能达到最差O(n)，平均O(logN)的时间复杂度。\n"),t("img",{attrs:{src:a(296),alt:"redis4"}}),s._v("\n这也是空间换时间的理念，如图，查找指定元素时，从顶层索引开始，依次和同层后一个节点比较，如果待找值大于后节点值，继续同层向后，如果待找值小于后节点值，则往下一层继续查找。")]),s._v(" "),t("p",[s._v("redis的实现粗看和理论有些不同，换成下面这张图应该就容易理解一点，同时具体看后续代码说明。\n"),t("img",{attrs:{src:a(297),alt:"redis7"}})])])]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplist")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表头节点和表尾节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("tail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表中节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表中层数最大的节点的层数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//层")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistLevel")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//前进指针")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("forward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//跨度")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" span"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//后退指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zskiplistNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("backward"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//分值")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" score"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成员对象")]),s._v("\n    robj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zskiplistNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])])]),t("p",[t("img",{attrs:{src:a(298),alt:"redis5"}}),s._v(" "),t("img",{attrs:{src:a(299),alt:"redis6"}})]),s._v(" "),t("p",[s._v("可以看到，首先是level数组，每个level包含下个节点指针和跨度span，如一个值feng 5.0的score，那它可能有三层索引，所以在L1,L2,L3三层上都会记录这个值。而若另一个值wen 9.0的score，可能中间隔着6、7、8三个score，但是6、7、8可能的层数为2，而9.0的层数为5，那此时feng 5.0这个node在L3层上的span跨度就为4，forward指向的就是9.0的L3。")]),s._v(" "),t("p",[s._v("对于新增的节点，每次用随机算法根据幂次定律(或者叫抛硬币概率，连续为正的难度会幂次提升）生成随机的高度，即1/2的几率level=1，1/4几率level=2,1/8几率level=3,1/16几率level=4...依此下去，所以粗略可以看出到32层的几率是很小的，这也是redis定义了最高层数是32的原因，因为够用。\n具体算法如下")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("zslRandomLevel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("random")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0xFFFF")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ZSKIPLIST_P "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0xFFFF")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("level"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ZSKIPLIST_MAXLEVEL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ZSKIPLIST_MAXLEVEL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("查找指定值时就是按之前所说，从最高层依此向右向下一层查找，这样在链表元素很多时，32层的高度查找起来速度要比顺序遍历快很多。")]),s._v(" "),t("p",[s._v("同时记录了表尾节点和后退指针，所以它也支持倒序遍历链表，同时如果分值相同，按值的从小到大正序排列。")]),s._v(" "),t("ul",[t("li",[s._v("用处"),t("br"),s._v("\n作为有序集合底层实现之一，"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("如果有序集合元素较多或者包含元素是较长字符串时")])]),s._v("，redis会采用跳表作为底层实现。")],1)]),s._v(" "),t("h3",{attrs:{id:"_1-5-整数数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-整数数组"}},[s._v("#")]),s._v(" 1.5 整数数组")]),s._v(" "),t("ul",[t("li",[s._v("数据结构定义"),t("br"),s._v("\n这个结构比较特殊，也蛮有想法的。它是一个按从小到大排序的整数数组，content的元素根据存入元素动态encoding决定存16、32、64位的整数，并且有升级操作，所以是在保证类型不出错的前提下尽可能的节省内存空间。")])]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("intset")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//编码方式")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" encoding"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//集合包含的元素数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//保存元素的数组")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("int8_t")]),s._v(" contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" intset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("比如encoding是16位的整数，之前3个数是[1][3][5]，如此，占据了48位的空间，而后续假如来了个-199999999，那会将encoding改为32，同时每个元素占32位空间，并且后续不会降级。[-199999999][1][3][5]。如此")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("用处"),t("br"),s._v(" "),t("font",{attrs:{color:"red"}},[t("strong",[s._v("当一个集合只包含整数值元素，并且这个集合的元素数量不多时，")])]),s._v("Redis就会使用整数集合作为集合键的底层实现。")],1)]),s._v(" "),t("li",[t("p",[s._v("机制")]),s._v(" "),t("ul",[t("li",[s._v("升级规则"),t("br"),s._v("\n如上")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-6-压缩列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-压缩列表"}},[s._v("#")]),s._v(" 1.6 压缩列表")]),s._v(" "),t("ul",[t("li",[s._v("数据结构定义"),t("br"),s._v("\n压缩列表是Redis为了节约内存而开发的，是由一系列特殊编码的连续内存块组成的顺序型（sequential）数据结构。一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。"),t("br"),s._v("\n所以它实际上就是一个连续内存块，但是可以保存多个节点，因为是连续内存块所以不会造成内存碎片，同时根据encoding动态取容量和zlbytes等机制，所以它也是为了节省内存设计的数据结构。\n"),t("img",{attrs:{src:a(300),alt:"redis8"}}),s._v(" "),t("img",{attrs:{src:a(301),alt:"redis9"}})])]),s._v(" "),t("p",[s._v("每个entry节点包含content、encoding、previous_entry_length属性。\n所以根据zlbytes和zltail的地址以及各个节点中的previous_entry_length可以遍历各个节点。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("用处"),t("br"),s._v("\n压缩列表（ziplist）是列表键和哈希键的底层实现之一。"),t("font",{attrs:{color:"red"}},[t("strong",[s._v("当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，")])]),s._v("那么Redis就会使用压缩列表来做列表键的底层实现。")],1)]),s._v(" "),t("li",[t("p",[s._v("问题")]),s._v(" "),t("ul",[t("li",[s._v("连锁更新\nziplist是连续内存块，且每个entry节点内部有content,encoding,previous_entry_length属性。而previous_entry_length属性可以是1或5个字节，假如上一个节点字节长度大于254，则下个节点的previous_entry_length会变成5个字节，从0xFE开头，如0xFE00002766。后面四个字节用于记录前一个entry的长度，0xFE用作标识。这样带来的问题，一种情况是假如有连续250-253字节的entry节点，向其头部插入一个大于254字节的新节点，这样原来的头节点就得将previous_entry_length变为5字节，而因此自身字节长度也会超过254字节。导致下一个节点也会按此操作，这带来的就是后续的节点都会连续更新。")])])])]),s._v(" "),t("h3",{attrs:{id:"_1-7-扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-扩展"}},[s._v("#")]),s._v(" 1.7 扩展")]),s._v(" "),t("ul",[t("li",[s._v("redis发展这么些年，当然内部和书本上变化还是蛮大的，比如使用object encoding去查看的话，会发现现在有quickList,listpack等等。放弃了双向链表和压缩列表转而采用listpack和快速列表。具体也可以在conf里配置阈值，如图所示，我在7版本的redis中配置了")])]),s._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("max"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ziplist"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("size 127\n")])])]),t("p",[s._v("效果如下\n"),t("img",{attrs:{src:a(302),alt:"redis10"}})]),s._v(" "),t("h2",{attrs:{id:"_2-应用层数据对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用层数据对象"}},[s._v("#")]),s._v(" 2.应用层数据对象")]),s._v(" "),t("p",[s._v("redis并不是直接使用上述数据结构，而是构建了个redisObject对象，因为redis是按键值对来使用的，所以每次新建redis对象的时候都是创建两个对象，分别是键和值，键都是字符串，而值则是redisObject,redisObject有三个属性，分别是type,ptr指针,以及encoding。"),t("br"),s._v("\ntype为string,list,hash,set,zset，而encoding则分为具体的int,embstr,raw,quicklist,listpack,hashtable,intset,skiplist等等。ptr则是具体指针。对应关系如下，当然，新版本已经将ziplist和双端链表换成了listpack和quicklist。\n"),t("img",{attrs:{src:a(303),alt:"redis11"}}),s._v(" "),t("img",{attrs:{src:a(304),alt:"redis12"}})]),s._v(" "),t("h3",{attrs:{id:"_2-1-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-字符串"}},[s._v("#")]),s._v(" 2.1 字符串")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("底层数据结构")]),s._v(" "),t("ul",[t("li",[s._v("int")]),s._v(" "),t("li",[s._v("embstr")]),s._v(" "),t("li",[s._v("raw"),t("br"),s._v("\n字符串的redisObject的encoding会使用上诉三种类型，当long型整数值时，会使用int，而进行append之类操作或float等计算时，会转为raw，当是小于44字节的字符串时，会使用embstr，而进行操作时，会转为raw，大于44字节的字符串时会是raw。区别在于内存分配次数embstr为一次，而raw需要两次，分别分配redisObject和sds的内存。同时embstr没有计算函数，所以每次计算就会转为raw。\n"),t("img",{attrs:{src:a(305),alt:"redis13"}})])])]),s._v(" "),t("li",[t("p",[s._v("常用命令  "),t("a",{attrs:{href:"https://redis.io/commands/?group=string&utm_source=redisinsight&utm_medium=main&utm_campaign=tutorials",target:"_blank",rel:"noopener noreferrer"}},[s._v("详细见这"),t("OutboundLink")],1)]),s._v(" "),t("ul",[t("li",[s._v("set")]),s._v(" "),t("li",[s._v("get")]),s._v(" "),t("li",[s._v("strlen")]),s._v(" "),t("li",[s._v("append")]),s._v(" "),t("li",[s._v("incr")]),s._v(" "),t("li",[s._v("decr")]),s._v(" "),t("li",[s._v("setex")]),s._v(" "),t("li",[s._v("setnx")]),s._v(" "),t("li",[s._v("getrange")]),s._v(" "),t("li",[s._v("setrange")]),s._v(" "),t("li",[s._v("...")])])])]),s._v(" "),t("h3",{attrs:{id:"_2-2-列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-列表"}},[s._v("#")]),s._v(" 2.2 列表")]),s._v(" "),t("p",[s._v("在老的版本中，采用了ziplist和linkedlist两种数据结构作为底层实现，但是新版本中已经被替换成了listpack和quicklist。\n老的版本ziplist因为上诉所说的连锁更新问题，所以新版本的listpack中将previous_entry_length改为了当前节点的length，同时去除了zltail。这样根据地址同样能遍历并获取到各个节点。同时也没有了连锁更新问题。"),t("br"),s._v("\n而quickList也是一个有首位项的双向链表，但是链表中的元素不再是具体的字节数组或整数而改成了ziplist，后续则变成了listpack。\n"),t("img",{attrs:{src:a(306),alt:"redis14"}})]),s._v(" "),t("ul",[t("li",[t("p",[s._v("底层数据结构")]),s._v(" "),t("ul",[t("li",[s._v("zipList")]),s._v(" "),t("li",[s._v("linkedList")]),s._v(" "),t("li",[s._v("listpack")]),s._v(" "),t("li",[s._v("quickList")])])]),s._v(" "),t("li",[t("p",[s._v("常用命令")]),s._v(" "),t("ul",[t("li",[s._v("lpush rpush")]),s._v(" "),t("li",[s._v("lrem")]),s._v(" "),t("li",[s._v("lpop rpop")]),s._v(" "),t("li",[s._v("linsert")]),s._v(" "),t("li",[s._v("lrange")]),s._v(" "),t("li",[s._v("llen")]),s._v(" "),t("li",[s._v("...")])])]),s._v(" "),t("li",[t("p",[s._v("配置")]),s._v(" "),t("ul",[t("li",[s._v("list-max-ziplist-size\n代表listpack内部大小或entry数量，正数代表数量，-1～-5代表4、8、16、32、64kb，推荐-2即8kb转换为quicklist。\n如配置了-1，用以下脚本插入值。"),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# conf地址根据brew安装包下homebrew.mxcl.redis.plist cat查看")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /usr/local/etc/redis.conf\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改为-1 即4kb")]),s._v("\n    list-max-ziplist-size "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v("\n")])])])])])])]),s._v(" "),t("h3",{attrs:{id:"_2-3-哈希表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-哈希表"}},[s._v("#")]),s._v(" 2.3 哈希表")]),s._v(" "),t("ul",[t("li",[s._v("底层数据结构\n"),t("ul",[t("li",[s._v("ziplist")]),s._v(" "),t("li",[s._v("hashtable")]),s._v(" "),t("li",[s._v("listpack")])])]),s._v(" "),t("li",[s._v("常用命令\n"),t("ul",[t("li",[s._v("hset")]),s._v(" "),t("li",[s._v("hdel")]),s._v(" "),t("li",[s._v("hsetnx")]),s._v(" "),t("li",[s._v("hkeys")]),s._v(" "),t("li",[s._v("hvals")]),s._v(" "),t("li",[s._v("hgetall")]),s._v(" "),t("li",[s._v("hget")]),s._v(" "),t("li",[s._v("hlen")]),s._v(" "),t("li",[s._v("...")])])]),s._v(" "),t("li",[s._v("配置\n"),t("ul",[t("li",[s._v("hash-max-ziplist-value")]),s._v(" "),t("li",[s._v("hash-max-ziplist-entries"),t("br"),s._v("\n很明了的encoding转换规则，当entries大于512个或值内单个元素字节大于64时，由listpack编码转为hashtable编码。")])])])]),s._v(" "),t("h3",{attrs:{id:"_2-4-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-集合"}},[s._v("#")]),s._v(" 2.4 集合")]),s._v(" "),t("ul",[t("li",[s._v("底层数据结构\n"),t("ul",[t("li",[s._v("intset")]),s._v(" "),t("li",[s._v("hashtable")]),s._v(" "),t("li",[s._v("listpack")])])]),s._v(" "),t("li",[s._v("常用命令\n"),t("ul",[t("li",[s._v("sadd")]),s._v(" "),t("li",[s._v("spop key 返回随机元素")]),s._v(" "),t("li",[s._v("srem key member1... 移除一个或多个值")]),s._v(" "),t("li",[s._v("smembers key 返回所有成员")]),s._v(" "),t("li",[s._v("srandmember key [count] 返回一个或多个成员，不删除")]),s._v(" "),t("li",[s._v("scard key 返回集合len")]),s._v(" "),t("li",[s._v("sinter key1 key2 返回给定集合的交集")]),s._v(" "),t("li",[s._v("sinterstore dest key1 key2 交集并保存")]),s._v(" "),t("li",[s._v("sdiff key1 key2 差集")]),s._v(" "),t("li",[s._v("sdiffstore dest key1 key2 返回给定集合的差集并保存到destination中")]),s._v(" "),t("li",[s._v("sunion key1 key2 并集")]),s._v(" "),t("li",[s._v("sunionstore dest key1 key2 并集并保存")])])]),s._v(" "),t("li",[s._v("配置\n"),t("ul",[t("li",[s._v("set-max-intset-entries")])])])]),s._v(" "),t("h3",{attrs:{id:"_2-5-有序集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-有序集合"}},[s._v("#")]),s._v(" 2.5 有序集合")]),s._v(" "),t("ul",[t("li",[s._v("底层数据结构\n"),t("ul",[t("li",[s._v("ziplist")]),s._v(" "),t("li",[s._v("listpack")]),s._v(" "),t("li",[s._v("skiplist\n"),t("img",{attrs:{src:a(307),alt:"redis15"}}),s._v("\n跳表有些特殊，除了listpack外，如果采取skiplist编码，还采用了hashtable用来保存键值对，以优化根据成员查找分值这一操作的时间复杂度由O(logN)变为O(1)。即zset底层定义是这样。\n"),t("img",{attrs:{src:a(308),alt:"redis16"}})])]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("zset")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  zskiplist "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("zsl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" zset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),t("li",[s._v("常用命令\n"),t("ul",[t("li",[s._v("zadd key score1 member1 ...")]),s._v(" "),t("li")])]),s._v(" "),t("li",[s._v("配置\n"),t("ul",[t("li",[s._v("zset-max-ziplist-entries")]),s._v(" "),t("li",[s._v("zset-max-ziplist-value")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);